#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: csi-s3-provisioner-sa
#---
#kind: ClusterRole
#apiVersion: rbac.authorization.k8s.io/v1
#metadata:
#  name: csi-s3-provisioner-role
#rules:
#  - apiGroups: [""]
#    resources: ["secrets"]
#    verbs: ["get", "create", "update", "delete"]
#  - apiGroups: [""]
#    resources: ["persistentvolumeclaims"]
#    verbs: ["get", "list", "create", "update", "delete"]
#---
#kind: ClusterRoleBinding
#apiVersion: rbac.authorization.k8s.io/v1
#metadata:
#  name: csi-s3-provisioner-rolebinding
#subjects:
#  - kind: ServiceAccount
#    name: csi-s3-provisioner-sa
#    namespace: default
#roleRef:
#  kind: ClusterRole
#  name: csi-s3-provisioner-role
#  apiGroup: rbac.authorization.k8s.io
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: csi-s3-provisioner
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: csi-s3-provisioner
#  template:
#    metadata:
#      labels:
#        app: csi-s3-provisioner
#    spec:
#      serviceAccountName: csi-s3-provisioner-sa
#      containers:
#        - name: csi-s3-provisioner
#          image: anshul05072002/csi-s3:0.0.2
#          args:
#            - "--endpoint=unix:///csi/csi.sock"
#            - "--provisioner=your.provisioner.name"
#            - "--access-key-id=AKIA57OPXNFOCLIJA3F2"
#            - "--secret-access-key=UDTPG047ih6oShaeWsKRVr/w2ItET8S9j8nZotGvW"
#            - "--region=ap-south-1"
#            - "--storage-class=csi-s3"
#          volumeMounts:
#            - name: socket-dir
#              mountPath: /csi
#      volumes:
#        - name: socket-dir
#          emptyDir: {}


apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-provisioner-sa
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: external-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-provisioner-role
subjects:
  - kind: ServiceAccount
    name: csi-provisioner-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: external-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: csi-provisioner-s3
  labels:
    app: csi-provisioner-s3
spec:
  selector:
    app: csi-provisioner-s3
  ports:
    - name: csi-s3-dummy
      port: 65535
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-provisioner-s3
spec:
  serviceName: "csi-provisioner-s3"
  replicas: 1
  selector:
    matchLabels:
      app: csi-provisioner-s3
  template:
    metadata:
      labels:
        app: csi-provisioner-s3
    spec:
      serviceAccountName: csi-provisioner-sa
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
      containers:
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v2.1.0
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=4"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/ru.yandex.s3.csi
        - name: csi-s3
          image: ctrox/csi-s3:v1.2.0-rc.2
          imagePullPolicy: IfNotPresent
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(NODE_ID)"
            - "--v=4"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/kubelet/plugins/ru.yandex.s3.csi/csi.sock
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/ru.yandex.s3.csi
      volumes:
        - name: socket-dir
          emptyDir: {}
